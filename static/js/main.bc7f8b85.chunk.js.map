{"version":3,"sources":["components/Weather.js","components/Loader.js","components/CurrLocWeather.js","components/OtherLocWeather.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","Condition","Temp","p","City","Weather","props","blob","temperature","city","country","loader","status","description","icon","error","weather_icon","Fragment","src","alt","toFixed","style","color","padding","fontFamily","fontSize","Pulse","keyframes","Svg","svg","Loader","viewBox","cx","cy","r","fill","API_KEY","CurrLoc","CurrIcon","P","CurrLocWeather","state","isLoaded","undefined","abortController","AbortController","controllerSignal","signal","weatherInit","navigator","geolocation","setState","getCurrentPosition","position","getWeatherData","coords","latitude","longitude","alert","lat","lon","weatherApi","fetch","then","response","json","result","console","log","name","sys","main","temp","humidity","weather","charAt","toUpperCase","slice","cod","message","this","abort","marginRight","faMapMarkerAlt","Component","Other","Add","OtherLocWeather","faMapMarkedAlt","cursor","faPlusCircle","size","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.bc7f8b85.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled, {keyframes} from 'styled-components';\r\n\r\n//-------------------------------------------------------------------------------------------------------\r\nconst Container = styled.div`\r\n    background-color: white;\r\n    display: flex;\r\n    position: relative;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 100%;\r\n    cursor: pointer;\r\n    padding: 2rem 1.5rem;\r\n    transition: all 0.2s ease;\r\n    border-radius: 5px;\r\n    box-shadow: 0 .1rem 1rem 5px rgba(0,0,0,0.07);\r\n    &:hover{\r\n        box-shadow: 0 .1rem 1rem 5px rgba(0,0,0,0.16);\r\n        transform: translateY(-3px);\r\n    }\r\n`;\r\n\r\nconst Condition = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    width: 100%;\r\n    margin: 1.7rem 0;\r\n    justify-content: space-evenly;\r\n`;\r\n\r\nconst Temp = styled.p`\r\n    font-size: 3.5rem;\r\n    color: #2b7a78;\r\n`;\r\n\r\nconst City = styled.p`\r\n    font-size: 1.3rem;\r\n    margin-bottom: 1rem;\r\n`;\r\n//-------------------------------------------------------------------------------------------------------\r\n\r\nfunction Weather(props) {\r\n    const { temperature, city, country, loader, status, description, icon, error} = props.blob;\r\n    const weather_icon = `http://openweathermap.org/img/wn/${icon}@2x.png`;\r\n\r\n    const renderContent = () => {\r\n        if(status === 'fetching'){\r\n            return loader;\r\n        }\r\n        else if(status === 'fetched'){\r\n            return (\r\n                <React.Fragment>\r\n                    { city && country && <City>{city}, {country}</City> }\r\n                    <Condition>\r\n                        { icon && <img src={weather_icon} alt=\"weather-icon\" />}\r\n                        { temperature && <Temp>{temperature.toFixed()}Â°C</Temp> }\r\n                    </Condition>\r\n                    { description && <p style={{color: '#3aafa9'}}>{description}</p> }\r\n                </React.Fragment>\r\n            )\r\n        }\r\n        else if(status === 'unable'){\r\n            return <p style={{color: 'red', padding: '1rem 0', fontFamily: \"'Varela Round', sans-serif\", fontSize: '1.2rem'}}>{error}</p>\r\n        }\r\n        else{\r\n            return <p style={{color: 'red', padding: '1rem 0'}}>{error}</p>\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Container>\r\n                {renderContent()}\r\n            </Container>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Weather;\r\n","import React from 'react';\r\nimport styled, { keyframes } from 'styled-components';\r\n\r\nconst Pulse = keyframes`\r\n    from{ transform: scale(1); }\r\n    to{ transform: scale(0.5); }\r\n`;\r\n\r\nconst Svg = styled.svg`\r\n    width: 40px;\r\n    animation: ${Pulse} .2s ease-in-out infinite alternate;\r\n`;\r\n\r\nfunction Loader() {\r\n    return (\r\n        <Svg viewBox=\"0 0 100 100\">\r\n            <circle cx=\"50%\" cy=\"50%\" r=\"50%\" fill=\"#71d1cf\" />\r\n        </Svg>\r\n    )\r\n}\r\n\r\nexport default Loader;\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport Weather from './Weather';\r\nimport Loader from './Loader';\r\nimport { faMapMarkerAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst API_KEY = '2870e042874453c6dfd4719bc74e5778';\r\n\r\n\r\nconst CurrLoc = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    margin-bottom: 2.5rem;\r\n    padding: 2rem;\r\n`;\r\n\r\nconst CurrIcon = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    margin-bottom: 3rem;\r\n`;\r\n\r\nconst P = styled.p`\r\n    font-size: 1.1rem;\r\n    font-family: 'Varela Round', sans-serif;\r\n`;\r\n\r\nclass CurrLocWeather extends Component{\r\n    state = {\r\n        status: 'init',\r\n        isLoaded: false,\r\n        loader: undefined,\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        description: undefined,\r\n        icon: undefined,\r\n        error: undefined\r\n    }\r\n\r\n    abortController = new AbortController();\r\n    controllerSignal = this.abortController.signal;\r\n\r\n    weatherInit = () => {\r\n        const success = (position) => {\r\n            this.setState({status: 'fetching'})\r\n            this.getWeatherData(position.coords.latitude, position.coords.longitude);\r\n        }\r\n\r\n        const error = () => {\r\n            this.setState({status: 'unable', error: 'Please enable location access'});\r\n        }\r\n\r\n        if(navigator.geolocation){\r\n            this.setState({status: 'fetching', loader: <Loader />});\r\n            navigator.geolocation.getCurrentPosition(success, error);\r\n        }\r\n        else{\r\n            this.setState({status: 'unsupported'});\r\n            alert('Your browser does not support location tracking, or permission is denied');\r\n        }\r\n    }\r\n\r\n    getWeatherData = (lat, lon) => {\r\n        const weatherApi = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\r\n        fetch(weatherApi, { signal: this.controllerSignal })\r\n        .then(response => response.json())\r\n        .then((result) => {\r\n            console.log(result);\r\n            const { name } = result;\r\n            const { country } = result.sys;\r\n            const { temp, humidity } = result.main;\r\n            let { description, icon } = result.weather[0];\r\n            description = description.charAt(0).toUpperCase() + description.slice(1);\r\n            this.setState({\r\n                isLoaded: true,\r\n                temperature: temp,\r\n                status: 'fetched',\r\n                city: name,\r\n                country: country,\r\n                humidity,\r\n                description,\r\n                icon,\r\n                error: (result.cod === '404')? result.message: null\r\n            })\r\n        },(error) => {\r\n            this.setState({\r\n                isLoaded: true,\r\n                error\r\n            });\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.weatherInit();\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this.abortController.abort();\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <CurrLoc>\r\n                <CurrIcon>\r\n                    <FontAwesomeIcon style={{marginRight: '.6rem'}} icon={faMapMarkerAlt} ></FontAwesomeIcon>\r\n                    <P>Current Location</P>\r\n                </CurrIcon>\r\n                <Weather blob={this.state} />\r\n            </CurrLoc>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CurrLocWeather;\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport { faMapMarkedAlt, faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    margin-top: 2.5rem;\r\n`;\r\n\r\nconst Other = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    margin-bottom: 3rem;\r\n`;\r\n\r\nconst P = styled.p`\r\n    font-size: 1.1rem;\r\n    font-family: 'Varela Round', sans-serif;\r\n`;\r\n\r\nconst Add = styled.div`\r\n    display: flex;\r\n    width: 100%;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: #71d1cf;\r\n`;\r\n\r\nclass OtherLocWeather extends Component {\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Other>\r\n                    <FontAwesomeIcon style={{marginRight: '.6rem'}} icon={faMapMarkedAlt}></FontAwesomeIcon>\r\n                    <P>Other Locations</P>\r\n                </Other>\r\n                <Add>\r\n                    <FontAwesomeIcon style={{cursor: 'pointer'}} icon={faPlusCircle} size='2x'></FontAwesomeIcon>\r\n                </Add>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default OtherLocWeather;\r\n","import React, { Component } from 'react';\nimport CurrLocWeather from './components/CurrLocWeather';\nimport OtherLocWeather from './components/OtherLocWeather';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <React.Fragment>\n        <CurrLocWeather />\n        <OtherLocWeather />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}